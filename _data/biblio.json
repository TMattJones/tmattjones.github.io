[{"isbn": "978-0-9835678-6-8", "author": "Alastair Reid", "ENTRYTYPE": "article", "booktitle": "Proceedings of Formal Methods in Computer-Aided Design, (FMCAD 2016), Mountain View, CA, USA", "title": "Trustworthy Specifications of ARM v8-A and v8-M System Level Architecture", "month": "October", "slides": "fmcad2016-trustworthy-slides.pdf", "file": "fmcad2016-trustworthy.pdf", "year": "2016", "ID": "conf/fmcad/Reid16", "pages": "161-168"}, {"city": "Imperial College, London", "author": "Alastair Reid", "ENTRYTYPE": "article", "booktitle": "The 4th South of England Regional Programming Language Seminar (S-REPLS 4)", "title": "Trusting Large Specifications: The Virtuous Cycle", "month": "September", "file": "srepls4-trustworthy.pdf", "year": "2016", "ID": "conf/srepls4/Reid16", "day": "27"}, {"slides": "ISA-Formal-CAV2016.pdf", "publisher": "Springer Verlag", "file": "cav2016_isa_formal.pdf", "doi": "10.1007/978-3-319-41540-6_3", "isbn": "978-3-319-41539-0", "author": "Alastair Reid, Rick Chen, Anastasios Deligiannis, David Gilday, David Hoyes, Will Keen, Ashan Pathirane, Owen Shepherd, Peter Vrabel, Ali Zaidi", "title": "End-to-End Verification of ARM Processors with ISA-Formal", "journal": "CAV 2016, Part II, Lecture Notes in Computer Science", "series": "LNCS", "booktitle": "Proceedings of the 2016 International Conference on Computer Aided Verification (CAV'16)", "acceptance": "28", "number": "9780", "month": "July", "volume": "9780", "link": "http://dx.doi.org/10.1007/978-3-319-41540-6_3", "editor": "S. Chaudhuri and A. Farzan", "ENTRYTYPE": "article", "year": "2016", "ID": "conf/cav/Reid16", "pages": "42-58"}, {"publisher": "European Design and Automation Association", "doi": "10.7873/DATE.2014.037", "biburl": "http://dblp.uni-trier.de/rec/bib/conf/date/BoettcherAEGR14", "author": "Matthias Boettcher, Bashir M. Al-Hashimi, Mbou Eyole, Giacomo Gabrielli, Alastair Reid", "title": "Advanced SIMD: Extending the reach of contemporary SIMD architectures", "ENTRYTYPE": "inproceedings", "timestamp": "Tue, 10 Nov 2015 12:54:15 +0100", "booktitle": "Design, Automation & Test in Europe Conference & Exhibition, DATE 2014, Dresden, Germany, March 24-28, 2014", "acceptance": "22", "month": "March", "link": "http://dx.doi.org/10.7873/DATE.2014.037", "editor": "Gerhard Fettweis and Wolfgang Nebel", "file": "date2014_adv_simd.pdf", "year": "2014", "bibsource": "dblp computer science bibliography, http://dblp.org", "ID": "DBLP:conf/date/BoettcherAEGR14", "pages": "1-4"}, {"publisher": "ACM", "doi": "10.1145/1450095.1450112", "biburl": "http://dblp.uni-trier.de/rec/bib/conf/cases/ReidFGL08", "author": "Alastair D. Reid, Kriszti\u00e1n Flautner, Edmund Grimley-Evans, Yuan Lin", "title": "SoC-C: efficient programming abstractions for heterogeneous multicore systems on chip", "ENTRYTYPE": "inproceedings", "timestamp": "Mon, 27 Oct 2008 10:28:03 +0100", "booktitle": "Proceedings of the 2008 International Conference on Compilers, Architecture, and Synthesis for Embedded Systems, CASES 2008, Atlanta, GA, USA, October 19-24, 2008", "acceptance": "33", "month": "October", "link": "http://doi.acm.org/10.1145/1450095.1450112", "editor": "Erik R. Altman", "file": "SoC-Cpaper(cases2008).pdf", "year": "2008", "bibsource": "dblp computer science bibliography, http://dblp.org", "ID": "DBLP:conf/cases/ReidFGL08", "pages": "95--104"}, {"publisher": "IEEE Computer Society", "doi": "10.1109/MICRO.2008.4771787", "biburl": "http://dblp.uni-trier.de/rec/bib/conf/micro/WohLSMMCBKRWF08", "author": "Mark Woh, Yuan Lin, Sangwon Seo, Scott A. Mahlke, Trevor N. Mudge, Chaitali Chakrabarti, Richard Bruce, Danny Kershaw, Alastair Reid, Mladen Wilder, Kriszti\u00e1n Flautner", "title": "From SODA to scotch: The evolution of a wireless baseband processor", "timestamp": "Thu, 18 Sep 2014 16:58:22 +0200", "booktitle": "41st Annual IEEE/ACM International Symposium on Microarchitecture (MICRO-41 2008), November 8-12, 2008, Lake Como, Italy", "acceptance": "19", "ENTRYTYPE": "inproceedings", "link": "http://dx.doi.org/10.1109/MICRO.2008.4771787", "file": "mwoh-micro08.pdf", "year": "2008", "bibsource": "dblp computer science bibliography, http://dblp.org", "ID": "DBLP:conf/micro/WohLSMMCBKRWF08", "pages": "152--163"}, {"publisher": "IEEE Computer Society", "doi": "10.1109/SBAC-PAD.2007.26", "biburl": "http://dblp.uni-trier.de/rec/bib/conf/sbac-pad/OzerRB07", "title": "Low-cost Techniques for Reducing Branch Context Pollution in a Soft Realtime Embedded Multithreaded Processor", "timestamp": "Wed, 22 Apr 2015 16:41:58 +0200", "booktitle": "19th Symposium on Computer Architecture and High Performance Computing (SBAC-PAD 2007), 24-27 October 2007, Gramado, RS, Brazil", "author": "Emre \u00d6zer, Alastair Reid, Stuart Biles", "ENTRYTYPE": "inproceedings", "link": "http://dx.doi.org/10.1109/SBAC-PAD.2007.26", "file": "SBACPAD07.pdf", "year": "2007", "bibsource": "dblp computer science bibliography, http://dblp.org", "ID": "DBLP:conf/sbac-pad/OzerRB07", "pages": "37--44"}, {"publisher": "IEEE", "doi": "10.1109/SIPS.2006.352549", "biburl": "http://dblp.uni-trier.de/rec/bib/conf/sips/LinMMCRF06", "title": "Design and Implementation of Turbo Decoders for Software Defined Radio", "timestamp": "Fri, 11 Sep 2009 16:03:33 +0200", "booktitle": "Proceedings of the IEEE Workshop on Signal Processing Systems, SiPS 2006, Proceedings, October 2-4, 2006, Banff, Alberta, Canada", "author": "Yuan Lin, Scott A. Mahlke, Trevor N. Mudge, Chaitali Chakrabarti, Alastair Reid, Kriszti\u00e1n Flautner", "ENTRYTYPE": "inproceedings", "link": "http://dx.doi.org/10.1109/SIPS.2006.352549", "file": "lin-sips06.pdf", "year": "2006", "bibsource": "dblp computer science bibliography, http://dblp.org", "ID": "DBLP:conf/sips/LinMMCRF06", "pages": "22--27"}, {"title": "SPEX: A programming language for software defined radio", "booktitle": "Software Defined Radio Technical Conference and Product Exposition", "author": "Yuan Lin, Robert Mullenix, Mark Woh, Scott Mahlke, Trevor Mudge Alastair Reid, Kriszti\u00e1n Flautner", "ID": "conf:SDR:LinMW2006", "file": "lin-sdr06.pdf", "year": "2006", "ENTRYTYPE": "article"}, {"doi": "10.1145/1113830.1113833", "biburl": "http://dblp.uni-trier.de/rec/bib/journals/tecs/RegehrRW05", "title": "Eliminating stack overflow by abstract interpretation", "timestamp": "Tue, 04 Apr 2006 01:00:00 +0200", "journal": "ACM Trans. Embedded Comput. Syst.", "author": "John Regehr, Alastair Reid, Kirk Webb", "number": "4", "ENTRYTYPE": "article", "volume": "4", "link": "http://doi.acm.org/10.1145/1113830.1113833", "file": "p751-regehr.pdf", "year": "2005", "bibsource": "dblp computer science bibliography, http://dblp.org", "ID": "DBLP:journals/tecs/RegehrRW05", "pages": "751--778"}, {"publisher": "ACM", "doi": "10.1145/1024393.1024410", "biburl": "http://dblp.uni-trier.de/rec/bib/conf/asplos/RegehrR04", "author": "John Regehr, Alastair Reid", "title": "HOIST: a system for automatically deriving static analyzers for embedded systems", "timestamp": "Mon, 13 Feb 2006 00:00:00 +0100", "booktitle": "Proceedings of the 11th International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS 2004, Boston, MA, USA, October 7-13, 2004", "acceptance": "14", "ENTRYTYPE": "inproceedings", "link": "http://doi.acm.org/10.1145/1024393.1024410", "editor": "Shubu Mukherjee and Kathryn S. McKinley", "file": "p021-regehr.pdf", "year": "2004", "bibsource": "dblp computer science bibliography, http://dblp.org", "ID": "DBLP:conf/asplos/RegehrR04", "pages": "133--143"}, {"author": "John Regehr, Alastair Reid", "booktitle": "Proceedings of the Second AOSD Workshop on Aspects, Components, and Patterns for Infrastructure Software (ACP4IS)", "title": "Lock inference for systems software", "ID": "tsl-acp4is2003", "file": "tsl-acp4is.pdf", "ENTRYTYPE": "inproceedings"}, {"publisher": "Springer", "doi": "10.1007/978-3-540-45212-6_20", "biburl": "http://dblp.uni-trier.de/rec/bib/conf/emsoft/RegehrRW03", "timestamp": "Tue, 05 Jul 2011 01:00:00 +0200", "title": "Eliminating Stack Overflow by Abstract Interpretation", "series": "Lecture Notes in Computer Science", "booktitle": "Embedded Software, Third International Conference, EMSOFT 2003, Philadelphia, PA, USA, October 13-15, 2003, Proceedings", "author": "John Regehr, Alastair Reid, Kirk Webb", "ENTRYTYPE": "inproceedings", "volume": "2855", "link": "http://dx.doi.org/10.1007/978-3-540-45212-6_20", "editor": "Rajeev Alur and Insup Lee", "file": "emsoft03-preprint.pdf", "year": "2003", "bibsource": "dblp computer science bibliography, http://dblp.org", "ID": "DBLP:conf/emsoft/RegehrRW03", "pages": "306--322"}, {"publisher": "IEEE Computer Society", "doi": "10.1109/REAL.2003.1253251", "biburl": "http://dblp.uni-trier.de/rec/bib/conf/rtss/RegehrRWPL03", "title": "Evolving real-time systems using hierarchical scheduling and concurrency analysis", "timestamp": "Tue, 20 Jan 2015 18:18:59 +0100", "abstract": "We have developed a new way to look at real-time and embedded software: as a collection of execution environments created by a hierarchy of schedulers. Common schedulers include those that run interrupts, bottom-half handlers, threads, and events. We have created algorithms for deriving response times, scheduling overheads, and blocking terms for tasks in systems containing multiple execution environments. We have also created task scheduler logic, a formalism that permits checking systems for race conditions and other errors. Concurrency analysis of low-level software is challenging because there are typically several kinds of locks, such as thread mutexes and disabling interrupts, and groups of cooperating tasks may need to acquire some, all, or none of the available types of locks to create correct software. Our high level goal is to create systems that are evolvable: they are easier to modify in response to changing requirements than are systems created using traditional techniques. We have applied our approach to two case studies in evolving software for networked sensor nodes.", "author": "John Regehr, Alastair Reid, Kirk Webb, Michael A. Parker, Jay Lepreau", "ENTRYTYPE": "inproceedings", "link": "http://dx.doi.org/10.1109/REAL.2003.1253251", "file": "rtss03-preprint.pdf", "year": "2003", "bibsource": "dblp computer science bibliography, http://dblp.org", "ID": "DBLP:conf/rtss/RegehrRWPL03", "booktitle": "Proceedings of the 24th IEEE Real-Time Systems Symposium (RTSS 2003), 3-5 December 2003, Cancun, Mexico", "pages": "25--36"}, {"author": "Manuel Chakravarty, Sigbjorn Finne, Fergus Henderson, Marcin Kowalczyk, Daan Leijen, Simon Marlow, Erik Meijer, Sven Panne, Simon Peyton Jones, Alastair Reid, Malcolm Wallace, Michael Weber", "title": "The Haskell 98 Foreign Function Interface 1.0: An Addendum to the Haskell 98 Report", "ENTRYTYPE": "article", "link": "https://www.cse.unsw.edu.au/~chak/haskell/ffi", "file": "ffi.pdf", "year": "2003", "ID": "report:haskellffi:chakravarty2003"}, {"publisher": "ACM", "doi": "10.1145/581339.581367", "biburl": "http://dblp.uni-trier.de/rec/bib/conf/icse/EideRRL02", "author": "Eric Eide, Alastair Reid, John Regehr, Jay Lepreau", "title": "Static and dynamic structure in design patterns", "ENTRYTYPE": "inproceedings", "timestamp": "Sun, 14 Feb 2016 10:46:52 +0100", "abstract": "Design patterns are a valuable mechanism for emphasizing structure, capturing design expertise, and facilitating restructuring of software systems. Patterns are typically applied in the context of an object-oriented language and are implemented so that the pattern participants correspond to object instances that are created and connected at run-time. This paper describes a complementary realization of design patterns, in which many pattern participants correspond to statically instantiated and connected components.Our approach separates the static parts of the software design from the dynamic parts of the system behavior. This separation makes the software design more amenable to analysis, thus enabling more effective and domain-specific detection of system design errors, prediction of run-time behavior, and more effective optimization. This technique is applicable to imperative, functional, and object-oriented languages: we have extended C, Scheme, and Java with our component model. In this paper, we illustrate our approach in the context of the OSKit, a collection of operating system components written in C.", "acceptance": "15", "pages": "208--218", "link": "http://doi.acm.org/10.1145/581339.581367", "editor": "Will Tracz and Michal Young and Jeff Magee", "file": "knit-icse02.pdf", "year": "2002", "bibsource": "dblp computer science bibliography, http://dblp.org", "ID": "DBLP:conf/icse/EideRRL02", "booktitle": "Proceedings of the 24th International Conference on Software Engineering, ICSE 2002, 19-25 May 2002, Orlando, Florida, USA"}, {"title": "Aspect Weaving as Component Knitting: Separating Concerns with Knit", "booktitle": "Workshop on Advanced Separation of Concerns in Software Engineering", "author": "Eric Eide, Alastair Reid, Matthew Flatt, Jay Lepreau", "ID": "EEide01Aspect", "file": "knit-icse01-wasc.pdf", "year": "2001", "ENTRYTYPE": "inproceedings"}, {"publisher": "Springer", "doi": "10.1007/3-540-45241-9_21", "biburl": "http://dblp.uni-trier.de/rec/bib/conf/padl/PetersonHRH01", "timestamp": "Wed, 22 Jun 2011 01:00:00 +0200", "title": "FVision: A Declarative Language for Visual Tracking", "ENTRYTYPE": "inproceedings", "series": "Lecture Notes in Computer Science", "abstract": "Functional programming languages are not generally associated with computationally intensive tasks such as computer vision. We show that a declarative programming language like Haskell is effective for describing complex visual tracking systems. We have taken an existing C++ library for computer vision, called XVision, and used it to build FVision (pronounced ``fission''), a library of Haskell types and functions that provides a high-level interface to the lower-level XVision code. Using functional abstractions, users of FVision can build and test new visual tracking systems rapidly and reliably. The use of Haskell does not degrade system performance: computations are dominated by low-level calculations expressed in C++ while the Haskell ``glue code'' has a negligible impact on performance.  FVision is built using functional reactive programming (FRP) to express interaction in a purely functional manner. The resulting system demonstrates the viability of mixed-language programming: visual tracking programs continue to spend most of their time executing low-level image-processing code, while Haskell's advanced features allow us to develop and test systems quickly and with confidence. In this paper, we demonstrate the use of Haskell and FRP to express many basic abstractions of visual tracking.", "author": "John Peterson, Paul Hudak, Alastair Reid, Gregory D. Hager", "pages": "304--321", "volume": "1990", "link": "http://dx.doi.org/10.1007/3-540-45241-9_21", "editor": "I. V. Ramakrishnan", "file": "fvision-padl01-2.pdf", "year": "2001", "bibsource": "dblp computer science bibliography, http://dblp.org", "ID": "DBLP:conf/padl/PetersonHRH01", "booktitle": "Practical Aspects of Declarative Languages, Third International Symposium, PADL 2001, Las Vegas, Nevada, March 11-12, 2001, Proceedings"}, {"title": "The Hugs Graphics Library (Version 2.0)", "author": "Alastair Reid", "ENTRYTYPE": "misc", "file": "hugsgraphics.pdf", "year": "2001", "ID": "hugsgraphics2001"}, {"publisher": "USENIX Association", "biburl": "http://dblp.uni-trier.de/rec/bib/conf/osdi/ReidFSLE00", "title": "Knit: Component Composition for Systems Software", "timestamp": "Thu, 15 May 2014 18:36:23 +0200", "abstract": "Knit is a new component definition and linking language for systems code. Knit helps make C code more understandable and reusable by third parties, helps eliminate much of the performance overhead of componentization, detects subtle errors in component composition that cannot be caught with normal component type systems, and provides a foundation for developing future analyses over C-based components, such as cross-component optimization. The language is especially designed for use with component kits, where standard linking tools provide inadequate support for component configuration. In particular, we developed Knit for use with the OSKit, a large collection of components for building low-level systems. However, Knit is not OSKit-specific, and we have implemented parts of the Click modular router in terms of Knit components to illustrate the expressiveness and flexibility of our language. This paper provides an overview of the Knit language and its applications.", "author": "Alastair Reid, Matthew Flatt, Leigh Stoller, Jay Lepreau, Eric Eide", "ENTRYTYPE": "inproceedings", "link": "http://dl.acm.org/citation.cfm?id=1251253", "editor": "Michael B. Jones and M. Frans Kaashoek", "file": "knit-osdi00.pdf", "year": "2000", "bibsource": "dblp computer science bibliography, http://dblp.org", "ID": "DBLP:conf/osdi/ReidFSLE00", "booktitle": "4th Symposium on Operating System Design and Implementation (OSDI 2000), San Diego, California, USA, October 23-25, 2000", "pages": "347--360"}, {"publisher": "ACM", "biburl": "http://dblp.uni-trier.de/rec/bib/conf/icse/ReidPHH99", "author": "Alastair Reid, John Peterson, Gregory D. Hager, Paul Hudak", "title": "Prototyping Real-Time Vision Systems: An Experiment in DSL Design", "ENTRYTYPE": "inproceedings", "timestamp": "Mon, 14 May 2012 18:17:23 +0200", "abstract": "We describe the transformation of XVision, a large library of C++ code for real-time vision processing, into FVision (pronounced ``fission''), a fully-featured domain-specific language embedded in Haskell. The resulting prototype system substantiates the claims of increased modularity, effective code reuse, and rapid prototyping that characterize the DSL approach to system design. It also illustrates the need for judicious interface design: relegating computationally expensive tasks to XVision (pre-existing C++ components), and leaving modular compositional tasks to FVision (Haskell). At the same time, our experience demonstrates how Haskell's advanced language features (specifically parametric polymorphism, lazy evaluation, higher order functions and automatic storage reclamation) permit a rapid DSL design that is itself highly modular and easily modified. Overall, the resulting hybrid system exceeded our expectations: visual tracking programs continue to spend most of their time executing low level image-processing code, while Haskell's advanced features allow us to quickly develop and test small prototype systems within a matter of a few days and to develop realistic applications within a few weeks.", "acceptance": "19", "pages": "484--493", "link": "http://portal.acm.org/citation.cfm?id=302405.302681", "editor": "Barry W. Boehm and David Garlan and Jeff Kramer", "file": "fvision-icse99-2.pdf", "year": "1999", "bibsource": "dblp computer science bibliography, http://dblp.org", "ID": "DBLP:conf/icse/ReidPHH99", "booktitle": "Proceedings of the 1999 International Conference on Software Engineering, ICSE' 99, Los Angeles, CA, USA, May 16-22, 1999."}, {"publisher": "ACM", "doi": "10.1145/301618.301637", "biburl": "http://dblp.uni-trier.de/rec/bib/conf/pldi/JonesRHHM99", "author": "Simon L. Peyton Jones, Alastair Reid, Fergus Henderson, C. A. R. Hoare, Simon Marlow", "title": "A Semantics for Imprecise Exceptions", "ENTRYTYPE": "inproceedings", "timestamp": "Mon, 21 May 2012 16:19:53 +0200", "abstract": "Some modern superscalar microprocessors provide only imprecise exceptions. That is, they do not guarantee to report the same exception that would be encountered by a straightforward sequential execution of the program. In exchange, they offer increased performance or decreased area (which amount to much the same thing).  This performance/precision tradeoff has not so far been much explored at the programming language level. In this paper we propose a design for imprecise exceptions in the lazy functional programming language Haskell. We discuss various simpler designs, and conclude that imprecision is essential if the language is still to enjoy its current rich algebra of transformations. We sketch a precise semantics for the language extended with exceptions.  From the functional programming point of view, the paper shows how to extend Haskell with exceptions without crippling the language or its compilers. From the point of view of the wider programming language community, we pose the question of whether precision and performance can be traded off in other languages too.", "acceptance": "20", "pages": "25--36", "link": "http://doi.acm.org/10.1145/301618.301637", "editor": "Barbara G. Ryder and Benjamin G. Zorn", "file": "except.pdf", "year": "1999", "bibsource": "dblp computer science bibliography, http://dblp.org", "ID": "DBLP:conf/pldi/JonesRHHM99", "booktitle": "Proceedings of the 1999 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), Atlanta, Georgia, USA, May 1-4, 1999"}, {"author": "Simon Peyton Jones, Lennart Augustsson, Dave Barton, Brian Boutel, Warren Burton, Joseph Fasel, Kevin Hammond, Ralf Hinze, Paul Hudak, John Hughes, Thomas Johnsson, Mark Jones, John Launchbury, Erik Meijer, John Peterson, Alastair Reid, Colin Runciman, Philip Wadler", "title": "Haskell 98: A non-strict, purely functional language", "ENTRYTYPE": "misc", "link": "https://www.haskell.org/definition/", "file": "haskell98-report.pdf", "year": "1999", "ID": "report:haskell98report:jones1999"}, {"author": "Simon Peyton Jones, Lennart Augustsson, Dave Barton, Brian Boutel, Warren Burton, Joseph Fasel, Kevin Hammond, Ralf Hinze, Paul Hudak, John Hughes, Thomas Johnsson, Mark Jones, John Launchbury, Erik Meijer, John Peterson, Alastair Reid, Colin Runciman, Philip Wadler", "title": "Standard Libraries for the Haskell 98 Programming Language", "ENTRYTYPE": "misc", "link": "https://www.haskell.org/definition/", "file": "haskell98-library.pdf", "year": "1999", "ID": "report:haskell98libraries:jones1999"}, {"publisher": "Springer", "doi": "10.1007/3-540-48515-5_12", "biburl": "http://dblp.uni-trier.de/rec/bib/conf/ifl/Reid98", "timestamp": "Fri, 17 Jun 2011 01:00:00 +0200", "title": "Putting the Spine Back in the Spineless Tagless G-Machine: An Implementation of Resumable Black-Holes", "ENTRYTYPE": "inproceedings", "series": "Lecture Notes in Computer Science", "abstract": "Interrupt handling is a tricky business in lazy functional languages: we have to make sure that thunks that are being evaluated can be halted and later restarted if and when they are required. This is a particular problem for implementations which use black-holing. Black-Holing deliberately makes it impossible to revert such thunks to their original state to avoid a serious space leak. Interactive Haskell implementations such as Hugs and hbi catch interrupts and avoid the problem by omitting or disabling black-holing. Batch mode Haskell implementations such as HBC and the Glasgow Haskell Compiler (GHC) avoid this problem by disabling black-holing or by providing no way to catch interrupts. This paper describes a modification to GHC\u2019s abstract machine (the Spineless Tagless G-Machine) which simultaneously supports both interrupts and black-holing.", "author": "Alastair Reid", "pages": "186--199", "volume": "1595", "link": "http://dx.doi.org/10.1007/3-540-48515-5_12", "editor": "Kevin Hammond and Antony J. T. Davie and Chris Clack", "file": "spine-ifl98.pdf", "year": "1998", "bibsource": "dblp computer science bibliography, http://dblp.org", "ID": "DBLP:conf/ifl/Reid98", "booktitle": "Implementation of Functional Languages, 10th International Workshop, IFL'98, London, UK, September 9-11, Selected Papers"}, {"title": "Handling Exceptions in Haskell", "ENTRYTYPE": "inproceedings", "abstract": "Using a language without exception handling is like driving a car with no brakes and no seatbelt --- things work fine until something goes wrong. You also learn to drive rather carefully. This paper describes an exception handling extension to the Haskell lazy functional language. The implementation turned out to be very easy but we had problems finding a viable semantics for our system. The resulting semantics is a compromise between theoretical beauty and practical utility.", "author": "Alastair Reid", "month": "August", "file": "exceptions98.pdf", "year": "1998", "ID": "Reid98exceptions", "booktitle": "Yale University Research Report YALE/DCS/RR-1178"}, {"title": "Designing the Standard Haskell Libraries", "author": "Alastair Reid, John Peterson", "ENTRYTYPE": "misc", "file": "libraries.pdf", "year": "1998", "ID": "Reid98haskelllibraries"}, {"title": "Green Card: a foreign-language interface for Haskell", "booktitle": "Proceedings of the Haskell Workshop, Amsterdam, June 1997", "author": "Simon Peyton Jones, Thomas Nordin, Alastair Reid", "ID": "greencard1997", "file": "green-card.pdf", "ENTRYTYPE": "inproceedings"}, {"title": "Adding Records to Haskell", "booktitle": "Proceedings of the Haskell Workshop 1995, Yale University Research Report YALE/DCS/RR-1075", "author": "John Peterson, Alastair Reid", "ID": "Peterson95addingrecords", "link": "https://www.haskell.org/haskell-workshop/1995/HW1995-Proceedings.pdf", "file": "records.pdf", "year": "1995", "ENTRYTYPE": "inproceedings"}, {"title": "A Proposal for the Standard Haskell Libraries", "booktitle": "Proceedings of the Haskell Workshop 1995, Yale University Research Report YALE/DCS/RR-1075", "author": "Alastair Reid, John Peterson", "ENTRYTYPE": "inproceedings", "link": "https://www.haskell.org/haskell-workshop/1995/HW1995-Proceedings.pdf", "file": "HW1995-Proceedings.pdf", "year": "1995", "ID": "Reid95haskelllibraries", "page": "69-81"}, {"title": "Malloc Pointers and Stable Pointers: Improving Haskell's Foreign Language Interface", "booktitle": "In Glasgow Functional Programming Workshop Draft Proceedings", "author": "Alastair Reid", "ID": "Reid94mallocpointers", "file": "malloc.pdf", "year": "1994", "ENTRYTYPE": "inproceedings"}, {"publisher": "Springer London", "doi": "10.1007/978-1-4471-3236-3_18", "isbn": "978-1-4471-3236-3", "title": "Implementing Fudgets with Standard Widget Sets", "ENTRYTYPE": "inbook", "abstract": "Carlsson and Hallgren describe the implementation of a set of \"functional widgets\" (Fudgets): components for programming graphical user interfaces under the X window system using the non-strict functional programming language Haskell. We describe an alternative implementation based on existing widget sets (currently Openlook and Motif). Our purpose is twofold: to show that the Fudgets approach can be applied to existing widget sets; and to discuss problems experienced with Fudgets during an industrial case study.", "author": "Alastair Reid, Satnam Singh", "pages": "222--235", "link": "http://link.springer.com/chapter/10.1007/978-1-4471-3236-3_18", "editor": "John T. O'Donnell and Kevin Hammond", "file": "budgets.pdf", "year": "1994", "ID": "Reid1994", "booktitle": "Functional Programming, Glasgow 1993: Proceedings of the 1993 Glasgow Workshop on Functional Programming, Ayr, Scotland, 5--7 July 1993", "address": "London"}, {"school": "Glasgow School of Computing Science", "title": "A Precise Semantics for Ultraloose Specifications", "author": "Alastair Reid", "ID": "ReidThesis93", "file": "ReidThesis93.pdf", "year": "1993", "ENTRYTYPE": "mastersthesis"}, {"publisher": "Springer", "biburl": "http://dblp.uni-trier.de/rec/bib/conf/fp/Reid89", "timestamp": "Tue, 18 Feb 2003 11:17:54 +0100", "title": "Designing Data Structures", "ENTRYTYPE": "inproceedings", "series": "Workshops in Computing", "abstract": "The design (as opposed to the choice and use) of data structures has been the subject of relatively little study in the context of formal methods. In this paper, we introduce our ideas on how data structures are designed.", "author": "Alastair Reid", "pages": "170--181", "editor": "Kei Davis and John Hughes", "file": "designing.pdf", "year": "1989", "bibsource": "dblp computer science bibliography, http://dblp.org", "ID": "DBLP:conf/fp/Reid89", "booktitle": "Functional Programming, Proceedings of the 1989 Glasgow Workshop, 21-23 August 1989, Fraserburgh, Scotland, UK"}]
