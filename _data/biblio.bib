@article{conf/fmcad/Reid16,
    title     = {Trustworthy Specifications of {ARM} {v8-A} and {v8-M}
                 System Level Architecture},
    authors   = {Alastair Reid},
    booktitle = {Proceedings of Formal Methods in Computer-Aided Design,
                 ({FMCAD} 2016), Mountain View, CA, USA},
    pages     = {To Appear},
    month     = {October},
    year      = {2016}
}

@article{conf/cav/Reid16,
    title      = {End-to-End Verification of {ARM} Processors with {ISA-Formal}},
    booktitle  = {Proceedings of the 2016 International Conference on Computer Aided Verification (CAV'16)},
    acceptance = {28},
    editor     = {S. Chaudhuri and A. Farzan},
    series     = {LNCS},
    volume     = {9780},
    pages      = {42-58},
    publisher  = {Springer Verlag},
    month      = {July},
    year       = {2016},
    authors    = {Alastair Reid and Rick Chen and Anastasios Deligiannis and
        David Gilday and David Hoyes and Will Keen and Ashan Pathirane and
        Owen Shepherd and Peter Vrabel and Ali Zaidi},
    journal    = {CAV 2016, Part II, Lecture Notes in Computer Science},
    number     = {9780},
    url        = {http://dx.doi.org/10.1007/978-3-319-41540-6_3},
    doi        = {10.1007/978-3-319-41540-6_3},
    isbn       = {978-3-319-41539-0},
}

@inproceedings{DBLP:conf/date/BoettcherAEGR14,
  author    = {Matthias Boettcher and
               Bashir M. Al{-}Hashimi and
               Mbou Eyole and
               Giacomo Gabrielli and
               Alastair Reid},
  editor    = {Gerhard Fettweis and
               Wolfgang Nebel},
  title     = {Advanced {SIMD:} Extending the reach of contemporary {SIMD} architectures},
  acceptance = {22},
  booktitle = {Design, Automation {\&} Test in Europe Conference {\&} Exhibition,
               {DATE} 2014, Dresden, Germany, March 24-28, 2014},
  pages     = {1-4},
  publisher = {European Design and Automation Association},
  month     = {March},
  year      = {2014},
  url       = {http://dx.doi.org/10.7873/DATE.2014.037},
  doi       = {10.7873/DATE.2014.037},
  timestamp = {Tue, 10 Nov 2015 12:54:15 +0100},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/date/BoettcherAEGR14},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{DBLP:conf/cases/ReidFGL08,
  author    = {Alastair D. Reid and
               Kriszti{\'{a}}n Flautner and
               Edmund Grimley{-}Evans and
               Yuan Lin},
  editor    = {Erik R. Altman},
  title     = {SoC-C: efficient programming abstractions for heterogeneous multicore
               systems on chip},
  acceptance = {33},
  booktitle = {Proceedings of the 2008 International Conference on Compilers, Architecture,
               and Synthesis for Embedded Systems, {CASES} 2008, Atlanta, GA, USA,
               October 19-24, 2008},
  pages     = {95--104},
  publisher = {{ACM}},
  month     = {October},
  year      = {2008},
  url       = {http://doi.acm.org/10.1145/1450095.1450112},
  doi       = {10.1145/1450095.1450112},
  timestamp = {Mon, 27 Oct 2008 10:28:03 +0100},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/cases/ReidFGL08},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{DBLP:conf/micro/WohLSMMCBKRWF08,
  author    = {Mark Woh and
               Yuan Lin and
               Sangwon Seo and
               Scott A. Mahlke and
               Trevor N. Mudge and
               Chaitali Chakrabarti and
               Richard Bruce and
               Danny Kershaw and
               Alastair Reid and
               Mladen Wilder and
               Kriszti{\'{a}}n Flautner},
  title     = {From {SODA} to scotch: The evolution of a wireless baseband processor},
  acceptance = {19},
  booktitle = {41st Annual {IEEE/ACM} International Symposium on Microarchitecture
               {(MICRO-41} 2008), November 8-12, 2008, Lake Como, Italy},
  pages     = {152--163},
  publisher = {{IEEE} Computer Society},
  year      = {2008},
  url       = {http://dx.doi.org/10.1109/MICRO.2008.4771787},
  doi       = {10.1109/MICRO.2008.4771787},
  timestamp = {Thu, 18 Sep 2014 16:58:22 +0200},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/micro/WohLSMMCBKRWF08},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{DBLP:conf/sbac-pad/OzerRB07,
  author    = {Emre {\"{O}}zer and
               Alastair Reid and
               Stuart Biles},
  title     = {Low-cost Techniques for Reducing Branch Context Pollution in a Soft
               Realtime Embedded Multithreaded Processor},
  booktitle = {19th Symposium on Computer Architecture and High Performance Computing
               {(SBAC-PAD} 2007), 24-27 October 2007, Gramado, RS, Brazil},
  pages     = {37--44},
  publisher = {{IEEE} Computer Society},
  year      = {2007},
  url       = {http://dx.doi.org/10.1109/SBAC-PAD.2007.26},
  doi       = {10.1109/SBAC-PAD.2007.26},
  timestamp = {Wed, 22 Apr 2015 16:41:58 +0200},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/sbac-pad/OzerRB07},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{DBLP:conf/sips/LinMMCRF06,
  author    = {Yuan Lin and
               Scott A. Mahlke and
               Trevor N. Mudge and
               Chaitali Chakrabarti and
               Alastair Reid and
               Kriszti{\'{a}}n Flautner},
  title     = {Design and Implementation of Turbo Decoders for Software Defined Radio},
  booktitle = {Proceedings of the {IEEE} Workshop on Signal Processing Systems, SiPS
               2006, Proceedings, October 2-4, 2006, Banff, Alberta, Canada},
  pages     = {22--27},
  publisher = {{IEEE}},
  year      = {2006},
  url       = {http://dx.doi.org/10.1109/SIPS.2006.352549},
  doi       = {10.1109/SIPS.2006.352549},
  timestamp = {Fri, 11 Sep 2009 16:03:33 +0200},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/sips/LinMMCRF06},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@article{conf:SDR:LinMW2006,
    authors = {Yuan Lin and Robert Mullenix and Mark Woh and Scott Mahlke
        and Trevor Mudge Alastair Reid and Kriszti√°n Flautner},
    title = {SPEX: A programming language for software defined radio},
    booktitle = {Software Defined Radio Technical Conference and Product Exposition},
    year = {2006}
}

@article{DBLP:journals/tecs/RegehrRW05,
  author    = {John Regehr and
               Alastair Reid and
               Kirk Webb},
  title     = {Eliminating stack overflow by abstract interpretation},
  journal   = {{ACM} Trans. Embedded Comput. Syst.},
  volume    = {4},
  number    = {4},
  pages     = {751--778},
  year      = {2005},
  url       = {http://doi.acm.org/10.1145/1113830.1113833},
  doi       = {10.1145/1113830.1113833},
  timestamp = {Tue, 04 Apr 2006 01:00:00 +0200},
  biburl    = {http://dblp.uni-trier.de/rec/bib/journals/tecs/RegehrRW05},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{DBLP:conf/asplos/RegehrR04,
  author    = {John Regehr and
               Alastair Reid},
  editor    = {Shubu Mukherjee and
               Kathryn S. McKinley},
  title     = {{HOIST:} a system for automatically deriving static analyzers for
               embedded systems},
  acceptance = {14},
  booktitle = {Proceedings of the 11th International Conference on Architectural
               Support for Programming Languages and Operating Systems, {ASPLOS}
               2004, Boston, MA, USA, October 7-13, 2004},
  pages     = {133--143},
  publisher = {{ACM}},
  year      = {2004},
  url       = {http://doi.acm.org/10.1145/1024393.1024410},
  doi       = {10.1145/1024393.1024410},
  timestamp = {Mon, 13 Feb 2006 00:00:00 +0100},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/asplos/RegehrR04},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{tsl-acp4is2003,
    title = {Lock inference for systems software},
    author = {John Regehr and Alastair Reid},
    booktitle = {Proceedings of the Second AOSD Workshop on Aspects,
        Components, and Patterns for Infrastructure Software (ACP4IS)},
    year = 2003
}

@inproceedings{DBLP:conf/emsoft/RegehrRW03,
  author    = {John Regehr and
               Alastair Reid and
               Kirk Webb},
  editor    = {Rajeev Alur and
               Insup Lee},
  title     = {Eliminating Stack Overflow by Abstract Interpretation},
  booktitle = {Embedded Software, Third International Conference, {EMSOFT} 2003,
               Philadelphia, PA, USA, October 13-15, 2003, Proceedings},
  series    = {Lecture Notes in Computer Science},
  volume    = {2855},
  pages     = {306--322},
  publisher = {Springer},
  year      = {2003},
  url       = {http://dx.doi.org/10.1007/978-3-540-45212-6_20},
  doi       = {10.1007/978-3-540-45212-6_20},
  timestamp = {Tue, 05 Jul 2011 01:00:00 +0200},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/emsoft/RegehrRW03},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{DBLP:conf/rtss/RegehrRWPL03,
  author    = {John Regehr and
               Alastair Reid and
               Kirk Webb and
               Michael A. Parker and
               Jay Lepreau},
  title     = {Evolving real-time systems using hierarchical scheduling and concurrency
               analysis},

  abstract  = { We have developed a new way to look at real-time and embedded
                software: as a collection of execution environments created by
                a hierarchy of schedulers. Common schedulers include those that run
                interrupts, bottom-half handlers, threads, and events. We have
                created algorithms for deriving response times, scheduling overheads,
                and blocking terms for tasks in systems containing multiple execution
                environments. We have also created task scheduler logic, a formalism
                that permits checking systems for race conditions and other errors.
                Concurrency analysis of low-level software is challenging because
                there are typically several kinds of locks, such as thread mutexes
                and disabling interrupts, and groups of cooperating tasks may need to
                acquire some, all, or none of the available types of locks to create
                correct software. Our high level goal is to create systems that are
                evolvable: they are easier to modify in response to changing
                requirements than are systems created using traditional techniques.
                We have applied our approach to two case studies in evolving software
                for networked sensor nodes.
  },

  booktitle = {Proceedings of the 24th {IEEE} Real-Time Systems Symposium {(RTSS}
               2003), 3-5 December 2003, Cancun, Mexico},
  pages     = {25--36},
  publisher = {{IEEE} Computer Society},
  year      = {2003},
  url       = {http://dx.doi.org/10.1109/REAL.2003.1253251},
  doi       = {10.1109/REAL.2003.1253251},
  timestamp = {Tue, 20 Jan 2015 18:18:59 +0100},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/rtss/RegehrRWPL03},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@article{report:haskellffi:chakravarty2003,
  title={The Haskell 98 Foreign Function Interface 1.0: An Addendum to the Haskell 98 Report},
  author = {
      Manuel Chakravarty
      and Sigbjorn Finne
      and Fergus Henderson
      and Marcin Kowalczyk
      and Daan Leijen
      and Simon Marlow
      and Erik Meijer
      and Sven Panne
      and Simon Peyton Jones
      and Alastair Reid
      and Malcolm Wallace
      and Michael Weber
  },
  year = 2003,
  url={https://www.cse.unsw.edu.au/~chak/haskell/ffi}
}

@inproceedings{DBLP:conf/icse/EideRRL02,
  author    = {Eric Eide and
               Alastair Reid and
               John Regehr and
               Jay Lepreau},
  editor    = {Will Tracz and
               Michal Young and
               Jeff Magee},
  title     = {Static and dynamic structure in design patterns},
  acceptance = {15},

  abstract  = { Design patterns are a valuable mechanism for emphasizing
                structure, capturing design expertise, and facilitating restructuring of
                software systems. Patterns are typically applied in the context of an
                object-oriented language and are implemented so that the pattern
                participants correspond to object instances that are created and
                connected at run-time. This paper describes a complementary
                realization of design patterns, in which many pattern participants
                correspond to statically instantiated and connected components.Our
                approach separates the static parts of the software design from the
                dynamic parts of the system behavior. This separation makes the
                software design more amenable to analysis, thus enabling more
                effective and domain-specific detection of system design errors,
                prediction of run-time behavior, and more effective optimization. This
                technique is applicable to imperative, functional, and
                object-oriented languages: we have extended C, Scheme, and Java with
                our component model. In this paper, we illustrate our approach in the
                context of the OSKit, a collection of operating system components
                written in C.
  },

  booktitle = {Proceedings of the 24th International Conference on Software Engineering,
               {ICSE} 2002, 19-25 May 2002, Orlando, Florida, {USA}},
  pages     = {208--218},
  publisher = {{ACM}},
  year      = {2002},
  url       = {http://doi.acm.org/10.1145/581339.581367},
  doi       = {10.1145/581339.581367},
  timestamp = {Sun, 14 Feb 2016 10:46:52 +0100},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/icse/EideRRL02},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{EEide01Aspect,
    Author = {Eric Eide and Alastair Reid and Matthew Flatt and Jay Lepreau},
    Title = {Aspect Weaving as Component Knitting: Separating Concerns with Knit},
    booktitle = {Workshop on Advanced Separation of Concerns in Software Engineering},
    Year = {2001}
}

@inproceedings{DBLP:conf/padl/PetersonHRH01,
  author    = {John Peterson and
               Paul Hudak and
               Alastair Reid and
               Gregory D. Hager},
  editor    = {I. V. Ramakrishnan},
  title     = {FVision: {A} Declarative Language for Visual Tracking},

  abstract  = { Functional programming languages are not generally associated
          with computationally intensive tasks such as computer vision. We show
          that a declarative programming language like Haskell is effective for
          describing complex visual tracking systems. We have taken an existing
          C++ library for computer vision, called XVision, and used it to build
          FVision (pronounced ``fission''), a library of Haskell types and
          functions that provides a high-level interface to the lower-level
          XVision code. Using functional abstractions, users of FVision can
          build and test new visual tracking systems rapidly and reliably. The
          use of Haskell does not degrade system performance: computations are
          dominated by low-level calculations expressed in C++ while the
          Haskell ``glue code'' has a negligible impact on performance.

          FVision is built using functional reactive programming (FRP) to
          express interaction in a purely functional manner. The resulting
          system demonstrates the viability of mixed-language programming:
          visual tracking programs continue to spend most of their time
          executing low-level image-processing code, while Haskell's advanced
          features allow us to develop and test systems quickly and with
          confidence. In this paper, we demonstrate the use of Haskell and FRP
          to express many basic abstractions of visual tracking.
  },

  booktitle = {Practical Aspects of Declarative Languages, Third International Symposium,
               {PADL} 2001, Las Vegas, Nevada, March 11-12, 2001, Proceedings},
  series    = {Lecture Notes in Computer Science},
  volume    = {1990},
  pages     = {304--321},
  publisher = {Springer},
  year      = {2001},
  url       = {http://dx.doi.org/10.1007/3-540-45241-9_21},
  doi       = {10.1007/3-540-45241-9_21},
  timestamp = {Wed, 22 Jun 2011 01:00:00 +0200},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/padl/PetersonHRH01},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@misc{hugsgraphics2001,
    author = {Alastair Reid},
    title = {The Hugs Graphics Library (Version 2.0)},
    year = 2001,
}

@inproceedings{DBLP:conf/osdi/ReidFSLE00,
  author    = {Alastair Reid and
               Matthew Flatt and
               Leigh Stoller and
               Jay Lepreau and
               Eric Eide},
  editor    = {Michael B. Jones and
               M. Frans Kaashoek},
  title     = {Knit: Component Composition for Systems Software},

  abstract  = { Knit is a new component definition and linking language for
                systems code. Knit helps make C code more understandable and reusable by
                third parties, helps eliminate much of the performance overhead of
                componentization, detects subtle errors in component composition that
                cannot be caught with normal component type systems, and provides
                a foundation for developing future analyses over C-based components,
                such as cross-component optimization. The language is especially designed
                for use with component kits, where standard linking tools provide
                inadequate support for component configuration. In particular, we
                developed Knit for use with the OSKit, a large collection of
                components for building low-level systems. However, Knit is
                not OSKit-specific, and we have implemented parts of the
                Click modular router in terms of Knit components to
                illustrate the expressiveness and flexibility of our
                language. This paper provides an overview of the Knit
                language and its applications.
  },

  booktitle = {4th Symposium on Operating System Design and Implementation {(OSDI}
               2000), San Diego, California, USA, October 23-25, 2000},
  pages     = {347--360},
  publisher = {{USENIX} Association},
  year      = {2000},
  url       = {http://dl.acm.org/citation.cfm?id=1251253},
  timestamp = {Thu, 15 May 2014 18:36:23 +0200},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/osdi/ReidFSLE00},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{DBLP:conf/icse/ReidPHH99,
  author    = {Alastair Reid and
               John Peterson and
               Gregory D. Hager and
               Paul Hudak},
  editor    = {Barry W. Boehm and
               David Garlan and
               Jeff Kramer},
  title     = {Prototyping Real-Time Vision Systems: An Experiment in {DSL} Design},
  acceptance = {19},

  abstract  = { We describe the transformation of XVision, a large library of
          C++ code for real-time vision processing, into FVision (pronounced
          ``fission''), a fully-featured domain-specific language embedded
          in Haskell. The resulting prototype system substantiates the claims
          of increased modularity, effective code reuse, and rapid prototyping
          that characterize the DSL approach to system design. It also
          illustrates the need for judicious interface design: relegating
          computationally expensive tasks to XVision (pre-existing C++
          components), and leaving modular compositional tasks to
          FVision (Haskell). At the same time, our experience demonstrates how
          Haskell's advanced language features (specifically parametric
          polymorphism, lazy evaluation, higher order functions and
          automatic storage reclamation) permit a rapid DSL design that
          is itself highly modular and easily modified. Overall, the resulting
          hybrid system exceeded our expectations: visual tracking programs
          continue to spend most of their time executing low level
          image-processing code, while Haskell's advanced features allow us to
          quickly develop and test small prototype systems within a matter of
          a few days and to develop realistic applications within a few weeks.
  },

  booktitle = {Proceedings of the 1999 International Conference on Software Engineering,
               ICSE' 99, Los Angeles, CA, USA, May 16-22, 1999.},
  pages     = {484--493},
  publisher = {{ACM}},
  year      = {1999},
  url       = {http://portal.acm.org/citation.cfm?id=302405.302681},
  timestamp = {Mon, 14 May 2012 18:17:23 +0200},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/icse/ReidPHH99},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@inproceedings{DBLP:conf/pldi/JonesRHHM99,
  author    = {Simon L. Peyton Jones and
               Alastair Reid and
               Fergus Henderson and
               C. A. R. Hoare and
               Simon Marlow},
  editor    = {Barbara G. Ryder and
               Benjamin G. Zorn},
  title     = {A Semantics for Imprecise Exceptions},
  acceptance = {20},

  abstract = {Some modern superscalar microprocessors provide only imprecise
              exceptions. That is, they do not guarantee to report the same exception
              that would be encountered by a straightforward sequential execution
              of the program. In exchange, they offer increased performance or
              decreased area (which amount to much the same thing).

              This performance/precision tradeoff has not so far been much explored at
              the programming language level. In this paper we propose a design for
              imprecise exceptions in the lazy functional programming language Haskell.
              We discuss various simpler designs, and conclude that imprecision is
              essential if the language is still to enjoy its current rich algebra of
              transformations. We sketch a precise semantics for the language extended
              with exceptions.

              From the functional programming point of view, the paper shows how to
              extend Haskell with exceptions without crippling the language or its
              compilers. From the point of view of the wider programming language
              community, we pose the question of whether precision and performance
              can be traded off in other languages too.  },

  booktitle = {Proceedings of the 1999 {ACM} {SIGPLAN} Conference on Programming
               Language Design and Implementation (PLDI), Atlanta, Georgia, USA,
               May 1-4, 1999},
  pages     = {25--36},
  publisher = {{ACM}},
  year      = {1999},
  url       = {http://doi.acm.org/10.1145/301618.301637},
  doi       = {10.1145/301618.301637},
  timestamp = {Mon, 21 May 2012 16:19:53 +0200},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/pldi/JonesRHHM99},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@misc{report:haskell98report:jones1999,
  title={Haskell 98: A non-strict, purely functional language},
  author={
      Simon Peyton Jones
      and Lennart Augustsson
      and Dave Barton
      and Brian Boutel
      and Warren Burton
      and Joseph Fasel
      and Kevin Hammond
      and Ralf Hinze
      and Paul Hudak
      and John Hughes
      and Thomas Johnsson
      and Mark Jones
      and John Launchbury
      and Erik Meijer
      and John Peterson
      and Alastair Reid
      and Colin Runciman
      and Philip Wadler
  },
  year={1999},
  url={https://www.haskell.org/definition/}
}

@misc{report:haskell98libraries:jones1999,
  title={Standard Libraries for the Haskell 98 Programming Language},
  author={
      Simon Peyton Jones
      and Lennart Augustsson
      and Dave Barton
      and Brian Boutel
      and Warren Burton
      and Joseph Fasel
      and Kevin Hammond
      and Ralf Hinze
      and Paul Hudak
      and John Hughes
      and Thomas Johnsson
      and Mark Jones
      and John Launchbury
      and Erik Meijer
      and John Peterson
      and Alastair Reid
      and Colin Runciman
      and Philip Wadler
  },
  year={1999},
  url={https://www.haskell.org/definition/}
}

@inproceedings{DBLP:conf/ifl/Reid98,
  author    = {Alastair Reid},
  editor    = {Kevin Hammond and
               Antony J. T. Davie and
               Chris Clack},
  title     = {Putting the Spine Back in the Spineless Tagless G-Machine: An Implementation
               of Resumable Black-Holes},
  abstract  = {Interrupt handling is a tricky business in lazy functional
               languages: we have to make sure that thunks that are being evaluated can
               be halted and later restarted if and when they are required. This is
               a particular problem for implementations which use black-holing.
               Black-Holing deliberately makes it impossible to revert such thunks
               to their original state to avoid a serious space leak. Interactive
               Haskell implementations such as Hugs and hbi catch interrupts and
               avoid the problem by omitting or disabling black-holing. Batch mode
               Haskell implementations such as HBC and the Glasgow Haskell Compiler
               (GHC) avoid this problem by disabling black-holing or by providing no
               way to catch interrupts. This paper describes a modification to GHC‚Äôs
               abstract machine (the Spineless Tagless G-Machine) which
               simultaneously supports both interrupts and black-holing.},
  booktitle = {Implementation of Functional Languages, 10th International Workshop,
               IFL'98, London, UK, September 9-11, Selected Papers},
  series    = {Lecture Notes in Computer Science},
  volume    = {1595},
  pages     = {186--199},
  publisher = {Springer},
  year      = {1998},
  url       = {http://dx.doi.org/10.1007/3-540-48515-5_12},
  doi       = {10.1007/3-540-48515-5_12},
  timestamp = {Fri, 17 Jun 2011 01:00:00 +0200},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/ifl/Reid98},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}


@inproceedings{Reid98exceptions,
    author = {Alastair Reid},
    title = {Handling Exceptions in Haskell},

    abstract = { Using a language without exception handling is like driving
        a car with no brakes and no seatbelt --- things work fine until
        something goes wrong. You also learn to drive rather carefully.
        This paper describes an exception handling extension to the Haskell
        lazy functional language. The implementation turned out to be very
        easy but we had problems finding a viable semantics for our system.
        The resulting semantics is a compromise between theoretical beauty
        and practical utility.
    },

    booktitle = {Yale University Research Report YALE/DCS/RR-1178},
    month = {August},
    year = {1998}
}

@misc{Reid98haskelllibraries,
    author = {Alastair Reid and John Peterson},
    title = {Designing the Standard Haskell Libraries},
    year = {1998},
}

@inproceedings{greencard1997,
    author = {Simon Peyton Jones and Thomas Nordin and Alastair Reid},
    title = {Green Card: a foreign-language interface for Haskell},
    booktitle = {Proceedings of the Haskell Workshop, Amsterdam, June 1997},
    year = 1997
}

@inproceedings{Peterson95addingrecords,
    author = {John Peterson and Alastair Reid},
    title = {Adding Records to Haskell},
    booktitle = {Proceedings of the Haskell Workshop 1995,
        Yale University Research Report YALE/DCS/RR-1075},
    year = {1995},
    url = {https://www.haskell.org/haskell-workshop/1995/HW1995-Proceedings.pdf}
}

@inproceedings{Reid95haskelllibraries,
    author = {Alastair Reid and John Peterson},
    title = {A Proposal for the Standard Haskell Libraries},
    booktitle = {Proceedings of the Haskell Workshop 1995,
        Yale University Research Report YALE/DCS/RR-1075},
    year = {1995},
    page = {69-81},
    url = {https://www.haskell.org/haskell-workshop/1995/HW1995-Proceedings.pdf}
}

@inproceedings{Reid94mallocpointers,
    author = {Alastair Reid},
    title = {Malloc Pointers and Stable Pointers: Improving Haskell's Foreign Language Interface},
    booktitle = {In Glasgow Functional Programming Workshop Draft Proceedings},
    year = {1994}
}

@Inbook{Reid1994,
    author="Alastair Reid and Satnam Singh",
    editor="John T. O'Donnell and Kevin Hammond",
    title="Implementing Fudgets with Standard Widget Sets",
    abstract = {
        Carlsson and Hallgren describe the implementation of a set of
        "functional widgets" (Fudgets): components for programming graphical
        user interfaces under the X window system using the non-strict
        functional programming language Haskell.
        We describe an alternative implementation based on existing
        widget sets (currently Openlook and Motif).
        Our purpose is twofold: to show that the Fudgets approach can be
        applied to existing widget sets; and to discuss problems experienced
        with Fudgets during an industrial case study.
    },
    bookTitle="Functional Programming, Glasgow 1993: Proceedings of the 1993 Glasgow Workshop on Functional Programming, Ayr, Scotland, 5--7 July 1993",
    year="1994",
    publisher="Springer London",
    address="London",
    pages="222--235",
    isbn="978-1-4471-3236-3",
    doi="10.1007/978-1-4471-3236-3_18",
    url={http://link.springer.com/chapter/10.1007/978-1-4471-3236-3_18}
}

@mastersthesis{ReidThesis93,
    author = {Alastair Reid},
    title = {A Precise Semantics for Ultraloose Specifications},
    school = {Glasgow School of Computing Science},
    year = {1993}
}

@inproceedings{DBLP:conf/fp/Reid89,
  author    = {Alastair Reid},
  editor    = {Kei Davis and
               John Hughes},
  title     = {Designing Data Structures},
  abstract  = {The design (as opposed to the choice and use) of data structures has
               been the subject of relatively little study in the context of formal methods.
               In this paper, we introduce our ideas on how data structures are designed.},
  booktitle = {Functional Programming, Proceedings of the 1989 Glasgow Workshop,
               21-23 August 1989, Fraserburgh, Scotland, {UK}},
  series    = {Workshops in Computing},
  pages     = {170--181},
  publisher = {Springer},
  year      = {1989},
  timestamp = {Tue, 18 Feb 2003 11:17:54 +0100},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/fp/Reid89},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

